<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>MainWindow</class>
 <widget class="QMainWindow" name="MainWindow">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>1323</width>
    <height>811</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>Learn Mips</string>
  </property>
  <widget class="QWidget" name="centralwidget">
   <widget class="CodeEditor" name="codeEdit">
    <property name="geometry">
     <rect>
      <x>540</x>
      <y>30</y>
      <width>781</width>
      <height>661</height>
     </rect>
    </property>
   </widget>
   <widget class="QWidget" name="controlBar" native="true">
    <property name="geometry">
     <rect>
      <x>540</x>
      <y>0</y>
      <width>781</width>
      <height>31</height>
     </rect>
    </property>
    <widget class="QPushButton" name="runButton">
     <property name="geometry">
      <rect>
       <x>0</x>
       <y>0</y>
       <width>80</width>
       <height>31</height>
      </rect>
     </property>
     <property name="text">
      <string>Run Code</string>
     </property>
    </widget>
    <widget class="QPushButton" name="submitButton">
     <property name="geometry">
      <rect>
       <x>670</x>
       <y>0</y>
       <width>111</width>
       <height>31</height>
      </rect>
     </property>
     <property name="text">
      <string>Check Solution</string>
     </property>
    </widget>
   </widget>
   <widget class="QWidget" name="consoleWidget" native="true">
    <property name="geometry">
     <rect>
      <x>539</x>
      <y>690</y>
      <width>781</width>
      <height>71</height>
     </rect>
    </property>
    <widget class="QPushButton" name="clearConsoleButton">
     <property name="geometry">
      <rect>
       <x>750</x>
       <y>0</y>
       <width>31</width>
       <height>71</height>
      </rect>
     </property>
     <property name="text">
      <string>clr</string>
     </property>
    </widget>
    <widget class="QTextBrowser" name="console">
     <property name="geometry">
      <rect>
       <x>0</x>
       <y>0</y>
       <width>751</width>
       <height>71</height>
      </rect>
     </property>
     <property name="sizeAdjustPolicy">
      <enum>QAbstractScrollArea::AdjustToContentsOnFirstShow</enum>
     </property>
     <property name="html">
      <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;meta charset=&quot;utf-8&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
hr { height: 1px; border-width: 0; }
li.unchecked::marker { content: &quot;\2610&quot;; }
li.checked::marker { content: &quot;\2612&quot;; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:'Segoe UI'; font-size:9pt;&quot;&gt;&lt;br /&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
     </property>
    </widget>
   </widget>
   <widget class="QWidget" name="tutorialWidget" native="true">
    <property name="geometry">
     <rect>
      <x>0</x>
      <y>0</y>
      <width>541</width>
      <height>761</height>
     </rect>
    </property>
    <widget class="QTabWidget" name="sectionTabs">
     <property name="geometry">
      <rect>
       <x>10</x>
       <y>0</y>
       <width>531</width>
       <height>761</height>
      </rect>
     </property>
     <property name="tabPosition">
      <enum>QTabWidget::West</enum>
     </property>
     <property name="currentIndex">
      <number>4</number>
     </property>
     <widget class="QWidget" name="s1Tab">
      <attribute name="title">
       <string>Lesson 1</string>
      </attribute>
      <widget class="QTabWidget" name="s1Widget">
       <property name="geometry">
        <rect>
         <x>0</x>
         <y>0</y>
         <width>491</width>
         <height>761</height>
        </rect>
       </property>
       <property name="currentIndex">
        <number>1</number>
       </property>
       <widget class="QWidget" name="t1_1">
        <attribute name="title">
         <string>Learn 1</string>
        </attribute>
        <widget class="QLabel" name="label_9">
         <property name="geometry">
          <rect>
           <x>0</x>
           <y>0</y>
           <width>481</width>
           <height>591</height>
          </rect>
         </property>
         <property name="text">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:x-large; font-weight:600;&quot;&gt;What is MIPS?&lt;/span&gt;&lt;/p&gt;&lt;p&gt;MIPS is a type of Assembly Language. This means that it is the closest to machine code that a human can still read with relative ease. Each instruction refers to actual functions the circuits on the cpu can perform.&lt;/p&gt;&lt;h2 style=&quot; margin-top:16px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:x-large; font-weight:600;&quot;&gt;What is a register?&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;The cpu has several small blocks of memory that it can use to store some values before saving them to a longer-term memory. It is useful to think of the registers as a “scratch pad” to do computations on or variable names. Registers roughly can be referred to with $t0-t6 for “temp” variables, $a0 for function arguments, $v0-v1 for return values, $s1-s6 for “saved temporary,” and $zero that always refers to 0. There is also the stack pointer $sp that keeps track of the memory address of the stack for reading and writing to/from.&lt;/p&gt;&lt;h2 style=&quot; margin-top:16px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:x-large; font-weight:600;&quot;&gt;How does each line of code look?&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;Each line of code will look something like this: add $t0, $t1, $t3, or instruction $dest, $source, $source The “add” is the instruction, which defines what the line of code will do. The destination register is the register that will be changed, and the source register will contain what is read. There are several types of instructions, which determine how many source, destination, and immediates (32 bit numbers) are included as a parameter for the instruction.&lt;/p&gt;&lt;h2 style=&quot; margin-top:16px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:x-large; font-weight:600;&quot;&gt;What is .data and .text?&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;These are tags that determine how the instructions below are interpreted. .data refers to resources such as ascii strings while .text refers to regular code. &lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="wordWrap">
          <bool>true</bool>
         </property>
        </widget>
       </widget>
       <widget class="QWidget" name="t2_1">
        <attribute name="title">
         <string>Learn 2</string>
        </attribute>
        <widget class="QLabel" name="label_3">
         <property name="geometry">
          <rect>
           <x>0</x>
           <y>0</y>
           <width>481</width>
           <height>631</height>
          </rect>
         </property>
         <property name="text">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;The addi (Add Immediate) instruction in MIPS assembly language is used to add a signed 32-bit immediate value to the contents of a register and store the result in another register. The syntax for the addi instruction is as follows:&lt;/p&gt;&lt;p&gt;addi $destination, $source, immediate&lt;br/&gt;&lt;/p&gt;&lt;p&gt;- `$destination`: The register where the result of the addition&lt;/p&gt;&lt;p&gt;will be stored.&lt;/p&gt;&lt;p&gt;- `$source`: The register containing the value to which the&lt;/p&gt;&lt;p&gt;immediate will be added.&lt;/p&gt;&lt;p&gt;- `immediate`: A signed 32-bit immediate value that will be&lt;/p&gt;&lt;p&gt;added to the contents of the `$source` register.&lt;/p&gt;&lt;p&gt;For example: &lt;/p&gt;&lt;p&gt;addi $t0, $t1, -100&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;This instruction adds the immediate value 100 to the contents of register `$t1` and stores the result in register `$t0`. The add instruction is similar to addi, but uses all registers as parameters:&lt;/p&gt;&lt;p&gt;add $t1, $t3, $t0 # store $t3+$t0 in $t1&lt;/p&gt;&lt;p&gt;The sub and subi instruction also exist as pseudo-instructions, meaning they are translated to add instructions at compile time:&lt;/p&gt;&lt;p&gt;subi $t1, $t3, 5&lt;/p&gt;&lt;p&gt;Translates to:&lt;/p&gt;&lt;p&gt;addi $t1, $t3, -5&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="wordWrap">
          <bool>true</bool>
         </property>
        </widget>
       </widget>
       <widget class="QWidget" name="t3_1">
        <attribute name="title">
         <string>Learn 3</string>
        </attribute>
        <widget class="QLabel" name="label_4">
         <property name="geometry">
          <rect>
           <x>0</x>
           <y>0</y>
           <width>481</width>
           <height>131</height>
          </rect>
         </property>
         <property name="text">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;In MIPS assembly language, the $zero register is a special register &lt;/p&gt;&lt;p&gt;that always contains the value zero. It is a hardwired register and &lt;/p&gt;&lt;p&gt;cannot be modified. The $zero register can be used in various ways, &lt;/p&gt;&lt;p&gt;including storing an immediate value in a register like so:&lt;/p&gt;&lt;p&gt;addi $t0, $zero, 11 # store 11 in $t0&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="scaledContents">
          <bool>false</bool>
         </property>
        </widget>
       </widget>
       <widget class="QWidget" name="t4_1">
        <attribute name="title">
         <string>Challenge 1</string>
        </attribute>
        <widget class="QLabel" name="label_5">
         <property name="geometry">
          <rect>
           <x>0</x>
           <y>0</y>
           <width>481</width>
           <height>71</height>
          </rect>
         </property>
         <property name="text">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Use the addi instruction to add 3 to the value in $a0, then place that updated value in the $v0 register (commonly used for a return value). Click check solution to see if your answer is correct!&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="wordWrap">
          <bool>true</bool>
         </property>
        </widget>
       </widget>
      </widget>
     </widget>
     <widget class="QWidget" name="s2Tab">
      <attribute name="title">
       <string>Lesson 2</string>
      </attribute>
      <widget class="QTabWidget" name="s2Widget">
       <property name="geometry">
        <rect>
         <x>0</x>
         <y>0</y>
         <width>491</width>
         <height>761</height>
        </rect>
       </property>
       <property name="currentIndex">
        <number>0</number>
       </property>
       <widget class="QWidget" name="t1_2">
        <attribute name="title">
         <string>Learn 1</string>
        </attribute>
        <widget class="QLabel" name="label_15">
         <property name="geometry">
          <rect>
           <x>0</x>
           <y>10</y>
           <width>481</width>
           <height>481</height>
          </rect>
         </property>
         <property name="text">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-weight:700;&quot;&gt;SRL (Shift Right Logical)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;The MIPS 'srl' (Shift Right Logical) instruction shifts the bits of a register to the right by a specified number of positions. Each bit is shifted to the next lower position, and 0s are introduced at the most significant bit.&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-weight:700;&quot;&gt;Example:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Suppose we have the following value in a register:&lt;/p&gt;&lt;p&gt;$t0 = 0b10101010 (decimal 170)&lt;/p&gt;&lt;p&gt;Performing srl $t1, $t0, 3 will shift the bits in $t0 right by 3 positions and store the result in $t1:&lt;/p&gt;&lt;p&gt;$t1 = 0b00010101 (decimal 21)&lt;/p&gt;&lt;p&gt;After shifting right by 3 positions, the original bits are moved three places to the right, and zeros are filled in on the left.&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-weight:700;&quot;&gt;SLL (Shift Left Logical)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;The MIPS sll (Shift Left Logical) instruction shifts the bits of a register to the left by a specified number of positions. Each bit is shifted to the next higher position, and 0s are introduced at the least significant bit.&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-weight:700;&quot;&gt;Example&lt;/span&gt;:&lt;/p&gt;&lt;p&gt;Suppose we have the following value in a register:&lt;/p&gt;&lt;p&gt;$t0 = 0b00001111 (decimal 15)&lt;/p&gt;&lt;p&gt;Performing sll $t1, $t0, 4 will shift the bits in $t0 left by 4 positions and store the result in $t1:&lt;/p&gt;&lt;p&gt;$t1 = 0b11110000 (decimal 240)&lt;/p&gt;&lt;p&gt;The SLL operation multiplies the number by 2 for each shift position if the number &lt;/p&gt;&lt;p&gt;is unsigned&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
        </widget>
       </widget>
       <widget class="QWidget" name="t2_2">
        <attribute name="title">
         <string>Learn 2</string>
        </attribute>
        <widget class="QLabel" name="label_16">
         <property name="geometry">
          <rect>
           <x>0</x>
           <y>5</y>
           <width>481</width>
           <height>391</height>
          </rect>
         </property>
         <property name="text">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;In MIPS assembly language, SLL (Shift Left Logical) and SRL (Shift Right Logical) are &lt;/p&gt;&lt;p&gt;bitwise operations that can effectively be used to multiply and &lt;/p&gt;&lt;p&gt;divide numbers by powers of two. &lt;/p&gt;&lt;p&gt;Understanding these operations can significantly enhance your ability to write efficient &lt;/p&gt;&lt;p&gt;code for arithmetic operations. Here’s a detailed guide on how these operations work and &lt;/p&gt;&lt;p&gt;how they correspond to multiplication and division.&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-weight:700;&quot;&gt;Use in Multiplication: &lt;/span&gt;&lt;/p&gt;&lt;p&gt;Shifting bits to the left by one position effectively multiplies the binary number by 2.&lt;/p&gt;&lt;p&gt;For example, if you have a binary number '0001' (which is 1 in decimal)&lt;/p&gt;&lt;p&gt;and you apply SLL by 1, it becomes '0010', which is 2 in decimal.&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-weight:700;&quot;&gt;Use in Division: &lt;/span&gt;&lt;/p&gt;&lt;p&gt;Shifting bits to the right by one position effectively divides the binary number by 2&lt;/p&gt;&lt;p&gt;(ignoring the remainder). For example, if you have a binary number '0010' (which is 2 in decimal) and you apply SRL by 1, it becomes '0001', &lt;/p&gt;&lt;p&gt;which is 1 in decimal.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
        </widget>
       </widget>
       <widget class="QWidget" name="t3_2">
        <attribute name="title">
         <string>Challenge 1</string>
        </attribute>
        <widget class="QLabel" name="label_17">
         <property name="geometry">
          <rect>
           <x>0</x>
           <y>0</y>
           <width>481</width>
           <height>191</height>
          </rect>
         </property>
         <property name="text">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;For this challenge, please isolate the least significant 8 bits of the number stored in $a0 by using srl and sll, and store that result in $v0.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-weight:700;&quot;&gt;Example:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;If the number in a0 is 001011001110111, then $v0 should hold 01110111. (These binary sequences are assumed to be prepended with zeros to extend them to 32 bits)&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="wordWrap">
          <bool>true</bool>
         </property>
        </widget>
       </widget>
      </widget>
     </widget>
     <widget class="QWidget" name="s3Tab">
      <attribute name="title">
       <string>Lesson 3</string>
      </attribute>
      <widget class="QTabWidget" name="s3Widget">
       <property name="geometry">
        <rect>
         <x>0</x>
         <y>0</y>
         <width>491</width>
         <height>761</height>
        </rect>
       </property>
       <property name="currentIndex">
        <number>0</number>
       </property>
       <widget class="QWidget" name="t1_3">
        <attribute name="title">
         <string>Learn 1</string>
        </attribute>
        <widget class="QLabel" name="label_18">
         <property name="geometry">
          <rect>
           <x>0</x>
           <y>0</y>
           <width>481</width>
           <height>291</height>
          </rect>
         </property>
         <property name="text">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:16pt;&quot;&gt;How to Define an ASCII String&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;A string needs to be defined after a .data tag. The declaration should be preceded by an asciiz operator and a label. For example:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;.data&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;helloText: .asciiz &amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;This example stores the text &amp;quot;Hello World!&amp;quot; as ascii characters refered to by the label &amp;quot;helloText&amp;quot;. Each character takes up one byte in memory, so a single word can store 4 characters. This is important later for navigating through a string, one character at a time.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;After defining any strings, a .text tag should be used to signify that everything following it is code.&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="wordWrap">
          <bool>true</bool>
         </property>
        </widget>
       </widget>
       <widget class="QWidget" name="t2_3">
        <attribute name="title">
         <string>Learn 2</string>
        </attribute>
        <widget class="QLabel" name="label_19">
         <property name="geometry">
          <rect>
           <x>0</x>
           <y>0</y>
           <width>491</width>
           <height>521</height>
          </rect>
         </property>
         <property name="text">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:16pt;&quot;&gt;What is a syscall?&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;A syscall is a Mips instruction that tells the operating system to do something that the program can't do itself. A syscall is called by simply typing syscall. It uses the value in $v0 as an opcode, which dictates what the syscall will do. Any parameters the syscall needs are stored in the $a0 register. A syscall to write a string to the console might look like this:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;.text&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;la $a0, helloText&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;addi $v0, $zero, 4&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;syscall&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;In the above example, &amp;quot;la $a0, helloText&amp;quot; loads the address of the string refered to by helloText into $a0. This is the parameter. &amp;quot;addi $v0, $zero, 4&amp;quot; sets the value of $v0 to 4. 4 is the op code to print a string. When printing an integer or char, $a0 should contain the actual integer or char and not an address.  What exact codes are supported depends on the assembler, the program that converts mips to real machine code. The codes supported in the LearnMips app are:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;1: Print Integer&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;4: Print String&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;10: Exit&lt;/span&gt;&lt;br/&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;11: Print Char&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="wordWrap">
          <bool>true</bool>
         </property>
        </widget>
       </widget>
       <widget class="QWidget" name="t3_3">
        <attribute name="title">
         <string>Challenge 1</string>
        </attribute>
        <widget class="QLabel" name="label_20">
         <property name="geometry">
          <rect>
           <x>0</x>
           <y>0</y>
           <width>481</width>
           <height>261</height>
          </rect>
         </property>
         <property name="text">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:16pt;&quot;&gt;The Mystery of the Stolen Eggs&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;Jerry is a known egg thief. To figure out how many eggs Jerry has stolen, you must print the value Jerry hid in $s0 that shows the full extent of his crimes, however, you must reveal this to your friends and a simple number isn't dramatic enough. Give the number some context when you print it out.&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;In this challenge, you will define a string that contains &amp;quot;Jerry STOLE &amp;quot; and another string that contains &amp;quot; eggs on his spree!&amp;quot; (note the spaces after &amp;quot;stole&amp;quot; and before &amp;quot;eggs&amp;quot;).&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt;&quot;&gt;You will then print &amp;quot;Jerry STOLE &amp;quot; + $s0 + &amp;quot; eggs on his spree!&amp;quot; to the console. The solution is case sensitive&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="wordWrap">
          <bool>true</bool>
         </property>
        </widget>
       </widget>
      </widget>
     </widget>
     <widget class="QWidget" name="s4Tab">
      <attribute name="title">
       <string>Lesson 4</string>
      </attribute>
      <widget class="QTabWidget" name="s4Widget">
       <property name="geometry">
        <rect>
         <x>0</x>
         <y>0</y>
         <width>491</width>
         <height>761</height>
        </rect>
       </property>
       <property name="currentIndex">
        <number>0</number>
       </property>
       <widget class="QWidget" name="t1_4">
        <attribute name="title">
         <string>Learn 1</string>
        </attribute>
        <widget class="QLabel" name="label_11">
         <property name="geometry">
          <rect>
           <x>0</x>
           <y>0</y>
           <width>461</width>
           <height>581</height>
          </rect>
         </property>
         <property name="text">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:16pt; font-weight:600;&quot;&gt;Labels and Branch Instructions&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Labels and branch instructions are used to control the flow of execution in a program. Here's a brief overview of how they work:&lt;/p&gt;&lt;h2 style=&quot; margin-top:16px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:14pt; font-weight:600;&quot;&gt;Labels&lt;/span&gt;&lt;/h2&gt;&lt;ul style=&quot;margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;&quot;&gt;&lt;li style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Labels are used to mark specific locations in your code.&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;They are defined by placing a label name followed by a colon (&lt;span style=&quot; font-family:'monospace';&quot;&gt;:&lt;/span&gt;) at the beginning of a line. (valid labels are alphanumeric, no spaces)&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Labels can be referenced by branch or jump instructions to change the program counter and execution flow.&lt;/li&gt;&lt;/ul&gt;&lt;h3 style=&quot; margin-top:14px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:x-large; font-weight:600;&quot;&gt;Branch Instructions&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace'; font-size:large; font-weight:600;&quot;&gt;j&lt;/span&gt;&lt;span style=&quot; font-size:large; font-weight:600;&quot;&gt; (Jump)&lt;/span&gt;&lt;/p&gt;&lt;ul style=&quot;margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;&quot;&gt;&lt;li style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Syntax: &lt;span style=&quot; font-family:'monospace';&quot;&gt;j examplelabel&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Unconditionally jumps to the specified label.&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Execution continues from the instruction at the label.&lt;/li&gt;&lt;/ul&gt;&lt;h3 style=&quot; margin-top:14px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:large; font-weight:600;&quot;&gt;beq&lt;/span&gt;&lt;span style=&quot; font-size:large; font-weight:600;&quot;&gt; (Branch If Equal)&lt;/span&gt;&lt;/h3&gt;&lt;ul style=&quot;margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;&quot;&gt;&lt;li style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Syntax: &lt;span style=&quot; font-family:'monospace';&quot;&gt;beq $t0, $t1, label&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Compares the values in registers &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t0&lt;/span&gt; and &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t1&lt;/span&gt;.&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;If the values are equal, jumps to the specified label.&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;If the values are not equal, continues with the next instruction.&lt;/li&gt;&lt;/ul&gt;&lt;h3 style=&quot; margin-top:14px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:large; font-weight:600;&quot;&gt;blt&lt;/span&gt;&lt;span style=&quot; font-size:large; font-weight:600;&quot;&gt; (Branch if Less Than)&lt;/span&gt;&lt;/h3&gt;&lt;ul style=&quot;margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;&quot;&gt;&lt;li style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Syntax: &lt;span style=&quot; font-family:'monospace';&quot;&gt;blt $t0, $t1, label&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Compares the values in registers &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t0&lt;/span&gt; and &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t1&lt;/span&gt;.&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;If the value in &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t0&lt;/span&gt; is less than the value in &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t1&lt;/span&gt;, jumps to the specified label.&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;If the value in &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t0&lt;/span&gt; is greater than or equal to the value in &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t1&lt;/span&gt;, continues with the next instruction.&lt;/li&gt;&lt;/ul&gt;&lt;h3 style=&quot; margin-top:14px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-size:large; font-weight:600;&quot;&gt;bgt&lt;/span&gt;&lt;span style=&quot; font-size:large; font-weight:600;&quot;&gt; (Branch if Greater Than)&lt;/span&gt;&lt;/h3&gt;&lt;ul style=&quot;margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;&quot;&gt;&lt;li style=&quot; margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Syntax: &lt;span style=&quot; font-family:'monospace';&quot;&gt;bgt $t0, $t1, label&lt;/span&gt;&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;Compares the values in registers &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t0&lt;/span&gt; and &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t1&lt;/span&gt;.&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;If the value in &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t0&lt;/span&gt; is greater than the value in &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t1&lt;/span&gt;, jumps to the specified label.&lt;/li&gt;&lt;li style=&quot; margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;If the value in &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t0&lt;/span&gt; is less than or equal to the value in &lt;span style=&quot; font-family:'monospace';&quot;&gt;$t1&lt;/span&gt;, continues with the next instruction.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;By using labels and branch instructions, you can create conditional statements, loops, and control the overall flow of your program. &lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="wordWrap">
          <bool>true</bool>
         </property>
        </widget>
       </widget>
       <widget class="QWidget" name="t2_4">
        <attribute name="title">
         <string>Learn 2</string>
        </attribute>
        <widget class="QLabel" name="label_12">
         <property name="geometry">
          <rect>
           <x>0</x>
           <y>0</y>
           <width>491</width>
           <height>281</height>
          </rect>
         </property>
         <property name="text">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;Here is an example mips program for loop for reference:&lt;br/&gt;&lt;/p&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;main:&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt; addi $t0, $zero, 0 # initialize counter i to 0&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt; addi $t1, $zero, 5 # set the upper bound to 5&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt; addi $t2, $zero, 0 # initialize sum to 0&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:'monospace';&quot;&gt;&lt;br/&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;loop:&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt; bgt $t0, $t1, end_loop # if i &amp;gt; 5, jump to end_loop&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt; add $t2, $t2, $t0  # sum = sum + i&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt; addi $t0, $t0, 1 # i = i + 1&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt; j loop    # jump back to the beginning of the loop&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:'monospace';&quot;&gt;&lt;br/&gt;&lt;/pre&gt;&lt;pre style=&quot; margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;end_loop:&lt;/span&gt;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="textFormat">
          <enum>Qt::AutoText</enum>
         </property>
         <property name="scaledContents">
          <bool>false</bool>
         </property>
         <property name="wordWrap">
          <bool>true</bool>
         </property>
        </widget>
       </widget>
       <widget class="QWidget" name="t3_4">
        <attribute name="title">
         <string>Challenge 1</string>
        </attribute>
        <widget class="QLabel" name="label_10">
         <property name="geometry">
          <rect>
           <x>0</x>
           <y>0</y>
           <width>491</width>
           <height>71</height>
          </rect>
         </property>
         <property name="text">
          <string>The goal of this challenge is to calculate the sum of the numbers from 0 to whatever is in $a0, with a specific condition: If the current number is less than 5, add 5 to the sum. Otherwise, add the current number to the sum, and store the sum in $v0.</string>
         </property>
         <property name="wordWrap">
          <bool>true</bool>
         </property>
        </widget>
       </widget>
      </widget>
     </widget>
     <widget class="QWidget" name="s5Tab">
      <attribute name="title">
       <string>Lesson 5</string>
      </attribute>
      <widget class="QTabWidget" name="s5Widget">
       <property name="geometry">
        <rect>
         <x>0</x>
         <y>0</y>
         <width>491</width>
         <height>761</height>
        </rect>
       </property>
       <property name="currentIndex">
        <number>0</number>
       </property>
       <widget class="QWidget" name="t1_5">
        <attribute name="title">
         <string>Learn 1</string>
        </attribute>
        <widget class="QTextBrowser" name="textBrowser">
         <property name="geometry">
          <rect>
           <x>0</x>
           <y>0</y>
           <width>491</width>
           <height>731</height>
          </rect>
         </property>
         <property name="html">
          <string>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0//EN&quot; &quot;http://www.w3.org/TR/REC-html40/strict.dtd&quot;&gt;
&lt;html&gt;&lt;head&gt;&lt;meta name=&quot;qrichtext&quot; content=&quot;1&quot; /&gt;&lt;meta charset=&quot;utf-8&quot; /&gt;&lt;style type=&quot;text/css&quot;&gt;
p, li { white-space: pre-wrap; }
hr { height: 1px; border-width: 0; }
li.unchecked::marker { content: &quot;\2610&quot;; }
li.checked::marker { content: &quot;\2612&quot;; }
&lt;/style&gt;&lt;/head&gt;&lt;body style=&quot; font-family:'Ubuntu'; font-size:11pt; font-weight:400; font-style:normal;&quot;&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-weight:600;&quot;&gt;Loads, Stores, and the Stack&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;The lw (load word) and sw (store word) opcodes are used to transfer data between memory and registers in MIPS assembly. They are commonly used in conjunction with the sp (stack pointer) register to manipulate the stack.&lt;/p&gt;
&lt;h3 style=&quot; margin-top:14px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:large; font-weight:600;&quot;&gt;lw (Load Word):&lt;/span&gt;&lt;/h3&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;Syntax: lw $t0, offset($s0)&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;The lw instruction loads a 32-bit word from memory into a register.&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;It calculates the memory address by adding the offset (a constant immediate value) to the contents of the source register $s0.&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;The loaded word is then stored in the target register $t0.&lt;/span&gt;&lt;/p&gt;
&lt;h3 style=&quot; margin-top:14px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:large; font-weight:600;&quot;&gt;sw (Store Word):&lt;/span&gt;&lt;/h3&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;Syntax: sw $t0, offset($s0)&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;The sw instruction stores a 32-bit word from a register into memory.&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;It calculates the memory address by adding the offset (a constant value) to the contents of the source register $s0.&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;The word from the target register $t0 is then stored at the calculated memory address.&lt;/span&gt;&lt;/p&gt;
&lt;h3 style=&quot; margin-top:14px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:large; font-weight:600;&quot;&gt;sp (Stack Pointer):&lt;/span&gt;&lt;/h3&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;The sp register is a special-purpose register used to point to the top of the stack.&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;It is conventionally used to manage the stack, which is a region of memory used for temporary storage.&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;The stack grows downward in memory, so the sp register is decremented when pushing data onto the stack and incremented when popping data off the stack.&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-weight:700;&quot;&gt;IMPORTANT:&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-family:'monospace'; font-weight:700;&quot;&gt;Before storing something to the stack, you need to make room for it by decrementing the stack pointer:&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-family:'monospace'; font-weight:700;&quot;&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;# make room for 1 word&lt;/p&gt;
&lt;p style=&quot; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;addi $sp, $sp, -4&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
        </widget>
       </widget>
       <widget class="QWidget" name="t2_5">
        <attribute name="title">
         <string>Learn 2</string>
        </attribute>
        <widget class="QLabel" name="label_14">
         <property name="geometry">
          <rect>
           <x>0</x>
           <y>0</y>
           <width>491</width>
           <height>361</height>
          </rect>
         </property>
         <property name="text">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:large; font-weight:600;&quot;&gt;Example Usage:&lt;/span&gt;&lt;/p&gt;&lt;h4 style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:medium; font-weight:600;&quot;&gt;Push a word onto the stack&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;    # Decrement stack pointer by 8 bytes (enough for 2 words)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;    addi $sp, $sp, -8&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;    sw $t0, 0($sp)# Store word from $t0 on the stack&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;    sw $t1, 4($sp)# Store word from $t1 on the stack&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;h4 style=&quot; margin-top:12px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;&quot;&gt;&lt;span style=&quot; font-size:medium; font-weight:600;&quot;&gt;Pop a word from the stack&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;    lw $s0, 0($sp)# Load word from stack to $s0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;    lw $s1, 4($sp)# Load word from stack to $s0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-family:'monospace';&quot;&gt;    addi $sp, $sp, 8 # Increment stack pointer by 4 bytes&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="wordWrap">
          <bool>true</bool>
         </property>
        </widget>
       </widget>
       <widget class="QWidget" name="t3_5">
        <attribute name="title">
         <string>Challenge 1</string>
        </attribute>
        <widget class="QLabel" name="label_13">
         <property name="geometry">
          <rect>
           <x>0</x>
           <y>0</y>
           <width>491</width>
           <height>91</height>
          </rect>
         </property>
         <property name="text">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:x-large; font-weight:600;&quot;&gt;lw sw Challenge&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Please load in 3 32-bit words from the stack (access with stack pointer), and then add them all together and store it at offset 12 in the stack pointer register. &lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="wordWrap">
          <bool>true</bool>
         </property>
        </widget>
       </widget>
      </widget>
     </widget>
     <widget class="QWidget" name="s6Tab">
      <attribute name="title">
       <string>Lesson 6</string>
      </attribute>
      <widget class="QTabWidget" name="s6Widget">
       <property name="geometry">
        <rect>
         <x>0</x>
         <y>0</y>
         <width>491</width>
         <height>761</height>
        </rect>
       </property>
       <property name="currentIndex">
        <number>0</number>
       </property>
       <widget class="QWidget" name="t1_6">
        <attribute name="title">
         <string>Learn 1</string>
        </attribute>
       </widget>
       <widget class="QWidget" name="t2_6">
        <attribute name="title">
         <string>Learn 2</string>
        </attribute>
       </widget>
       <widget class="QWidget" name="t3_6">
        <attribute name="title">
         <string>Challenge 1</string>
        </attribute>
       </widget>
      </widget>
     </widget>
     <widget class="QWidget" name="s7Tab">
      <attribute name="title">
       <string>Lesson 7</string>
      </attribute>
      <widget class="QTabWidget" name="s7Widget">
       <property name="geometry">
        <rect>
         <x>0</x>
         <y>0</y>
         <width>491</width>
         <height>761</height>
        </rect>
       </property>
       <property name="currentIndex">
        <number>0</number>
       </property>
       <widget class="QWidget" name="t1_7">
        <attribute name="title">
         <string>Learn 1</string>
        </attribute>
        <widget class="QLabel" name="label_6">
         <property name="geometry">
          <rect>
           <x>0</x>
           <y>0</y>
           <width>481</width>
           <height>331</height>
          </rect>
         </property>
         <property name="text">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:16pt; font-weight:700;&quot;&gt;MIPS xor/xori instruction&lt;/span&gt;&lt;/p&gt;&lt;p&gt;The MIPS &amp;quot;xor&amp;quot; (exclusive OR) and &amp;quot;xori&amp;quot; (exclusive OR immediate) instructions perform a bitwise XOR operation on two operands. The &amp;quot;xor&amp;quot; instruction operates on two registers, while &amp;quot;xori&amp;quot; operates on a register and an immediate value.&lt;/p&gt;&lt;p&gt;&lt;span style=&quot; font-weight:700;&quot;&gt;Example&lt;/span&gt;:&lt;br/&gt;Suppose we have the following values in registers:&lt;br/&gt;$t0 = 0b1010 (decimal 10)&lt;br/&gt;$t1 = 0b1100 (decimal 12)&lt;/p&gt;&lt;p&gt;Performing &amp;quot;xor $t2, $t0, $t1&amp;quot; will result in:&lt;br/&gt;$t2 = 0b0110 (decimal 6)&lt;/p&gt;&lt;p&gt;The XOR operation compares each bit of the operands and sets the corresponding bit in the result to 1 if the bits are different, and 0 if they are the same. In this example, the bits in positions 2 and 3 of $t0 and $t1 differ, so those bits are set to 1 in the result, while the other bits are set to 0.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="wordWrap">
          <bool>true</bool>
         </property>
        </widget>
       </widget>
       <widget class="QWidget" name="t2_7">
        <attribute name="title">
         <string>Learn 2</string>
        </attribute>
        <widget class="QLabel" name="label_7">
         <property name="geometry">
          <rect>
           <x>0</x>
           <y>0</y>
           <width>481</width>
           <height>451</height>
          </rect>
         </property>
         <property name="text">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:16pt; font-weight:700;&quot;&gt;OTP Encryption&lt;/span&gt;&lt;/p&gt;&lt;p&gt;A one-time pad (OTP) is a simple yet theoretically unbreakable encryption technique that uses a secret random key (the &amp;quot;pad&amp;quot;) to encrypt a message. The key must be at least as long as the message and is used only once, hence the name &amp;quot;one-time&amp;quot; pad.&lt;/p&gt;&lt;p&gt;In OTP encryption, each bit or character of the plaintext message is XORed with the corresponding bit or character of the key. The resulting ciphertext can only be decrypted by XORing it with the same key.&lt;br/&gt;&lt;/p&gt;&lt;p&gt;For example, let's say we have a plaintext message &amp;quot;HELLO&amp;quot; and an arbitrary key &amp;quot;XMCKL&amp;quot;. As binary:&lt;/p&gt;&lt;p&gt;Plaintext: 01001000 01000101 01001100 01001100 01001111&lt;/p&gt;&lt;p&gt;Key: 01011000 01001101 01000011 01001011 01001100&lt;/p&gt;&lt;p&gt;Ciphertext: 00010000 00001000 00001111 00000111 00000011&lt;/p&gt;&lt;p&gt;The ciphertext is obtained by XORing each bit of the plaintext with the corresponding bit of the key. Decryption follows the same process, XORing the ciphertext with the key to recover the original plaintext.&lt;/p&gt;&lt;p&gt;OTP encryption is unbreakable if the key is truly random, as long as the message, and never reused.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="wordWrap">
          <bool>true</bool>
         </property>
        </widget>
       </widget>
       <widget class="QWidget" name="t3_7">
        <attribute name="title">
         <string>Challenge 1</string>
        </attribute>
        <widget class="QLabel" name="label_8">
         <property name="geometry">
          <rect>
           <x>0</x>
           <y>0</y>
           <width>481</width>
           <height>261</height>
          </rect>
         </property>
         <property name="text">
          <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;In this challenge, you will implement a simple XOR encryption program in MIPS assembly. The plaintext to be encrypted is stored at the &amp;quot;plaintext&amp;quot; symbol, and the encryption key is stored at the &amp;quot;key&amp;quot; symbol. Your task is to XOR each byte of the plaintext with the corresponding byte of the key and store the resulting ciphertext in a new symbol called &amp;quot;ciphertext&amp;quot;, and store the size of the ciphertext (in bytes) in $v0.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Before attempting the challenge, we encourage you to use the editor to write and run your own code using the stored plaintext and key. Feel free to use the print character (syscall 11) to print the ciphertext character by character when testing to verify if its working or not. &lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
         </property>
         <property name="wordWrap">
          <bool>true</bool>
         </property>
        </widget>
       </widget>
      </widget>
     </widget>
     <widget class="QWidget" name="s8Tab">
      <attribute name="title">
       <string>Lesson 8</string>
      </attribute>
      <widget class="QTabWidget" name="s8Widget">
       <property name="geometry">
        <rect>
         <x>0</x>
         <y>0</y>
         <width>491</width>
         <height>761</height>
        </rect>
       </property>
       <property name="currentIndex">
        <number>0</number>
       </property>
       <widget class="QWidget" name="t1_8">
        <attribute name="title">
         <string>Learn 1</string>
        </attribute>
       </widget>
       <widget class="QWidget" name="t2_8">
        <attribute name="title">
         <string>Learn 2</string>
        </attribute>
       </widget>
       <widget class="QWidget" name="t3_8">
        <attribute name="title">
         <string>Challenge 1</string>
        </attribute>
       </widget>
      </widget>
     </widget>
     <widget class="QWidget" name="s9Tab">
      <attribute name="title">
       <string>Bonus Challenge 1</string>
      </attribute>
      <widget class="QTabWidget" name="s9Widget">
       <property name="geometry">
        <rect>
         <x>0</x>
         <y>0</y>
         <width>491</width>
         <height>761</height>
        </rect>
       </property>
       <property name="currentIndex">
        <number>2</number>
       </property>
       <widget class="QWidget" name="t1_9">
        <attribute name="title">
         <string>Learn 1</string>
        </attribute>
       </widget>
       <widget class="QWidget" name="t2_9">
        <attribute name="title">
         <string>Learn 2</string>
        </attribute>
       </widget>
       <widget class="QWidget" name="t3_9">
        <attribute name="title">
         <string>Challenge 1</string>
        </attribute>
       </widget>
      </widget>
     </widget>
     <widget class="QWidget" name="s10Tab">
      <attribute name="title">
       <string>Bonus Challenge 2</string>
      </attribute>
      <widget class="QTabWidget" name="s10Widget">
       <property name="geometry">
        <rect>
         <x>0</x>
         <y>0</y>
         <width>491</width>
         <height>761</height>
        </rect>
       </property>
       <property name="currentIndex">
        <number>0</number>
       </property>
       <widget class="QWidget" name="t1_10">
        <attribute name="title">
         <string>Learn 1</string>
        </attribute>
       </widget>
       <widget class="QWidget" name="t2_10">
        <attribute name="title">
         <string>Learn 2</string>
        </attribute>
       </widget>
       <widget class="QWidget" name="t3_10">
        <attribute name="title">
         <string>Challenge 1</string>
        </attribute>
       </widget>
      </widget>
     </widget>
     <widget class="QWidget" name="s11Tab">
      <attribute name="title">
       <string>Bonus Challenge 3</string>
      </attribute>
      <widget class="QTabWidget" name="s11Widget">
       <property name="geometry">
        <rect>
         <x>0</x>
         <y>0</y>
         <width>491</width>
         <height>761</height>
        </rect>
       </property>
       <property name="currentIndex">
        <number>0</number>
       </property>
       <widget class="QWidget" name="t1_11">
        <attribute name="title">
         <string>Learn 1</string>
        </attribute>
       </widget>
       <widget class="QWidget" name="t2_11">
        <attribute name="title">
         <string>Learn 2</string>
        </attribute>
       </widget>
       <widget class="QWidget" name="t3_11">
        <attribute name="title">
         <string>Challenge 1</string>
        </attribute>
       </widget>
      </widget>
     </widget>
     <widget class="QWidget" name="s12Tab">
      <attribute name="title">
       <string>Open Editor</string>
      </attribute>
      <widget class="QTabWidget" name="s12Widget">
       <property name="geometry">
        <rect>
         <x>0</x>
         <y>0</y>
         <width>491</width>
         <height>761</height>
        </rect>
       </property>
       <property name="currentIndex">
        <number>0</number>
       </property>
       <widget class="QWidget" name="t1_12">
        <attribute name="title">
         <string>Free Editor</string>
        </attribute>
        <widget class="QLabel" name="label">
         <property name="geometry">
          <rect>
           <x>20</x>
           <y>10</y>
           <width>441</width>
           <height>31</height>
          </rect>
         </property>
         <property name="font">
          <font>
           <pointsize>24</pointsize>
          </font>
         </property>
         <property name="text">
          <string>Free Editor</string>
         </property>
         <property name="textFormat">
          <enum>Qt::PlainText</enum>
         </property>
         <property name="alignment">
          <set>Qt::AlignCenter</set>
         </property>
        </widget>
        <widget class="QLabel" name="label_2">
         <property name="geometry">
          <rect>
           <x>170</x>
           <y>60</y>
           <width>141</width>
           <height>20</height>
          </rect>
         </property>
         <property name="text">
          <string>Code whatever you want</string>
         </property>
        </widget>
       </widget>
      </widget>
     </widget>
    </widget>
   </widget>
   <zorder>tutorialWidget</zorder>
   <zorder>consoleWidget</zorder>
   <zorder>controlBar</zorder>
   <zorder>codeEdit</zorder>
  </widget>
  <widget class="QMenuBar" name="menubar">
   <property name="geometry">
    <rect>
     <x>0</x>
     <y>0</y>
     <width>1323</width>
     <height>22</height>
    </rect>
   </property>
   <widget class="QMenu" name="menuFile">
    <property name="title">
     <string>File</string>
    </property>
    <addaction name="actionSave_All_Progress"/>
    <addaction name="actionLoad_All_Progress"/>
   </widget>
   <widget class="QMenu" name="menuHelp">
    <property name="title">
     <string>Help</string>
    </property>
    <addaction name="actionInstruction_Reference"/>
    <addaction name="actionSyscall_Op_Code_Reference"/>
   </widget>
   <addaction name="menuFile"/>
   <addaction name="menuHelp"/>
  </widget>
  <widget class="QStatusBar" name="statusbar"/>
  <action name="actionSave_All_Progress">
   <property name="text">
    <string>Save All Progress</string>
   </property>
  </action>
  <action name="actionLoad_All_Progress">
   <property name="text">
    <string>Load All Progress</string>
   </property>
  </action>
  <action name="actionInstruction_Reference">
   <property name="text">
    <string>Instruction Reference</string>
   </property>
  </action>
  <action name="actionSyscall_Op_Code_Reference">
   <property name="text">
    <string>Syscall Op Code Reference</string>
   </property>
  </action>
 </widget>
 <customwidgets>
  <customwidget>
   <class>CodeEditor</class>
   <extends>QTextEdit</extends>
   <header>codeeditor.h</header>
  </customwidget>
 </customwidgets>
 <resources/>
 <connections/>
</ui>
